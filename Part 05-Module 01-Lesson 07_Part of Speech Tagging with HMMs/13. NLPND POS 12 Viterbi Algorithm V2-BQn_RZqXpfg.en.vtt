WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.875
In this video, will develop the Viterbi algorithm in detail for this example.

00:00:04.875 --> 00:00:07.150
And if you've seen dynamic programming,

00:00:07.150 --> 00:00:08.950
that's exactly what we're doing.

00:00:08.949 --> 00:00:16.494
So here's our trellised diagram with the two probability tables, mission and transition.

00:00:16.495 --> 00:00:19.195
Let's draw this a bit larger with all the probabilities.

00:00:19.195 --> 00:00:22.000
Recall that on each node we have the emission probabilities,

00:00:22.000 --> 00:00:26.934
so that's the probability that the particular part of speech generated the word above.

00:00:26.934 --> 00:00:30.129
And on the edges, we have the transition probabilities which are

00:00:30.129 --> 00:00:33.429
the probability that we get from one state to the next one.

00:00:33.429 --> 00:00:35.560
For clarity, we've removed the edges that have

00:00:35.560 --> 00:00:37.570
probability zero but we still consider them.

00:00:37.570 --> 00:00:41.679
Now, the idea is that for each state or dot in the diagram,

00:00:41.679 --> 00:00:44.875
we will record the maximum probability of all the paths that

00:00:44.875 --> 00:00:48.670
end in that dot and generate the words that are above.

00:00:48.670 --> 00:00:50.664
So let's start from the left.

00:00:50.664 --> 00:00:54.579
The probability that the word Jane is generated by the path that ends at

00:00:54.579 --> 00:00:57.250
the top end node is the product of

00:00:57.250 --> 00:01:00.659
the probability of getting to that node from the start node,

00:01:00.659 --> 00:01:02.224
which is three quarters,

00:01:02.225 --> 00:01:07.090
times the probability that the node generated the word Jane which is two over nine.

00:01:07.090 --> 00:01:10.120
This product is one sixth that was recorded.

00:01:10.120 --> 00:01:15.045
Likewise, the probability of the M node is one-quarter times zero which is

00:01:15.045 --> 00:01:20.719
zero and the one on the V node is zero times zero which is zero.

00:01:20.719 --> 00:01:23.510
Now, let's go to the next word will.

00:01:23.510 --> 00:01:26.740
There are three paths that end in the top right N node.

00:01:26.739 --> 00:01:28.509
One coming from the previous N,

00:01:28.510 --> 00:01:31.395
one from the previous M and one from the previous

00:01:31.394 --> 00:01:35.679
V. We need to look at the three and pick the one with the largest probability.

00:01:35.680 --> 00:01:40.270
The probability for the path coming from the N node is one-sixth,

00:01:40.269 --> 00:01:43.390
which is a probability so far until the word Jane,

00:01:43.390 --> 00:01:48.185
times the transition probability one over nine to get to the new N node,

00:01:48.185 --> 00:01:52.754
times the emission probably one over nine for a emitting the word will.

00:01:52.754 --> 00:01:57.099
We'll record this product as one-sixth times one-ninth times one-ninth.

00:01:57.099 --> 00:01:59.519
Likewise, for the path that comes from the M,

00:01:59.519 --> 00:02:03.349
the probability is zero times one-quarter times one-ninth.

00:02:03.349 --> 00:02:05.280
And for the path that comes from the V,

00:02:05.280 --> 00:02:09.020
it's zero times one times one-ninth.

00:02:09.020 --> 00:02:10.750
Since two of these are zero,

00:02:10.750 --> 00:02:15.009
the largest one is the first one which is one over 486.

00:02:15.009 --> 00:02:17.919
So we will record that number as the probability of

00:02:17.919 --> 00:02:21.780
the highest probability path that ends up that point.

00:02:21.780 --> 00:02:23.305
And this is important,

00:02:23.305 --> 00:02:24.890
of the three coming edges,

00:02:24.889 --> 00:02:27.954
we will keep the one that gave the highest value.

00:02:27.955 --> 00:02:31.990
So that is blue edge over here and will delete the other ones.

00:02:31.990 --> 00:02:34.945
If two edges give us the same value, that's completely okay.

00:02:34.944 --> 00:02:37.474
We can break ties by picking one of them randomly.

00:02:37.474 --> 00:02:40.629
Now, we'll continue this algorithm and feel free to sing along with

00:02:40.629 --> 00:02:44.064
it or pause the video if you'd like to do the calculations in detail.

00:02:44.064 --> 00:02:46.914
For the M node, the competing probabilities are

00:02:46.914 --> 00:02:51.294
one-sixth times one-third times three-quarters zero and zero.

00:02:51.294 --> 00:02:53.019
So the winner is the first one,

00:02:53.020 --> 00:02:54.610
which has one over 24.

00:02:54.610 --> 00:02:58.420
Again, we keep the blue edge since they gave us the highest value.

00:02:58.419 --> 00:03:01.959
For the next one, it is zero since the three of them are zero.

00:03:01.960 --> 00:03:05.620
Here we can keep pretty much any edge since they all give us the same value.

00:03:05.620 --> 00:03:08.045
Since it's zero, in order to prevent cluttering,

00:03:08.044 --> 00:03:10.139
let's actually not keep any of the edges.

00:03:10.139 --> 00:03:13.254
We'll continue doing this in the future when we get all zeroes.

00:03:13.254 --> 00:03:17.769
And we continue over each word always calculating the three probabilities coming from

00:03:17.770 --> 00:03:23.500
before and taking the largest one and remembering which edge gave us the largest value.

00:03:23.500 --> 00:03:26.754
Keeping that one and removing the other ones.

00:03:26.754 --> 00:03:32.294
Now, we have a probabilities and also our edges that get us to those probabilities.

00:03:32.294 --> 00:03:34.500
So how do we get our optimal path?

00:03:34.500 --> 00:03:38.164
Well, we'll start from the end and trace backwards.

00:03:38.164 --> 00:03:41.264
Since each state only has one incoming edge,

00:03:41.264 --> 00:03:44.909
then this should give us a path that comes all the way from the beginning.

00:03:44.909 --> 00:03:47.699
And that path is the winning path.

00:03:47.699 --> 00:03:51.479
This gives us the chain of states that generates the observations with

00:03:51.479 --> 00:03:54.449
the highest probability and that's how we conclude

00:03:54.449 --> 00:03:57.974
that the most likely tags for the sentence are noun,

00:03:57.974 --> 00:04:00.495
modal, verb, and noun.

00:04:00.495 --> 00:04:04.034
And these are correct so I hit a mark of our modal did a great job.

00:04:04.034 --> 00:04:07.259
And as you notice, we didn't need to check three to the four paths.

00:04:07.259 --> 00:04:12.329
We only needed that label around the three times four nodes which is much faster.

